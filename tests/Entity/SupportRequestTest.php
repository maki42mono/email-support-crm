<?php

namespace App\Tests\Entity;

use App\Entity\SupportRequest;
use App\Exceptions\InvalidMaxDayRequestsException;
use App\Support\SupportRequestService;
use PHPUnit\Framework\TestCase;

class SupportRequestTest extends TestCase
{
    private $supportService;

    public function setUp(): void
    {
        $this->supportService = $this->createMock(SupportRequestService::class);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testInvalidMaxDayRequests()
    {
        $this->supportService->method('getDayMaxRequests')
            ->willReturn(99);
        $supportRequest = new SupportRequest($this->supportService);
        $this->expectException(InvalidMaxDayRequestsException::class);
        $supportRequest->calcRequestId();
    }


    /**
     * @dataProvider getTodayCounts
     */
    public function testGetRequestSuffix(int $MaxPerDay, int $todayRequestsCount, string $requestId): void
    {

        $this->supportService->method('getTodayRequestsCount')
            ->willReturn($todayRequestsCount);
        $this->supportService->method('getDayMaxRequests')
            ->willReturn($MaxPerDay);


        $supportRequest = new SupportRequest($this->supportService);

        $this->assertEquals($supportRequest->getRequestSuffix(), $requestId);
    }

    /**
     * @dataProvider getTodayCounts
     */
    public function testGetRequestId(int $MaxPerDay, int $todayRequestsCount, string $requestId): void
    {
        $this->supportService->method('getTodayRequestsCount')
            ->willReturn($todayRequestsCount);
        $this->supportService->method('getDayMaxRequests')
            ->willReturn($MaxPerDay);

        $today = new \DateTime();


        $supportRequest = new SupportRequest($this->supportService);
        $this->assertEquals($today->format('Ymd') . $requestId, $supportRequest->calcRequestId());
    }

    public function getTodayCounts(): array
    {
        return [
            [100, 12, '13'],
            [100, 6, '07'],
            [1000, 1233, '1234'],
            [1000, 123, '124'],
            [100, 123, '124'],
            [100, 123456, '123457'],
            [10000, 123, '0124'],
        ];
    }
}
